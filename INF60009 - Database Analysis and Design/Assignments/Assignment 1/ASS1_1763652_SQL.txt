--Modify this script so that it meets the requirements of Assignment 1
--When done, complete these tasks:
--1. SAVE this file
--2. EXECUTE this entire script in ISQL Jr
--3. Copy and paste the OUTPUT generated by ISQL Jr into a file named ASS1_1234567_OUTPUT.TXT (where 1234567 is your student id)
--4. ZIP this file with the ASS1_1234567_OUTPUT.TXT file and submit via ESP (see instructions on page 1 of the assignment)
prompt START OF OUTPUT SECTION
prompt Student ID:    1763652
prompt Student Name:  Sze Yick
prompt Tutor Name:    Huan Ngyuen
prompt Tutorial Day:  Thursday
prompt Tutorial Time: 7:30pm
prompt Tutorial Room: BA604
prompt --------------------------------------------------------------
prompt Task 1.1 ENGLISH SENTENCES DESCRIBING THE ERD
--XXXXXXXXXXXXXXXX (Replace this line with your English statements. Keep the -- symbols at beginning of line )
--ONE STATE MAY have MANY CITY.
--ONE CITY MUST have ONE STATE.
--ONE CITY MAY contain MANY WAREHOUSE.
--ONE WAREHOUSE MUST belong to ONE CITY.
prompt --------------------------------------------------------------
prompt Task 1.2 DROP ALL TABLES
--XXXXXXXXXXXXXXXX (Replace this line with your SQL statements. DO NOT place -- symbols in front of any SQL code)
DROP TABLE STOCKITEM;
DROP TABLE MANUFACTURER;
DROP TABLE WAREHOUSE;
DROP TABLE SHOP;
DROP TABLE CITY;
DROP TABLE STATE;
prompt --------------------------------------------------------------
prompt Task 1.3 CREATE STATE TABLE
--XXXXXXXXXXXXXXXX (Replace this line with your SQL statements. DO NOT place -- symbols in front of any SQL code)
CREATE TABLE STATE (statecode VARCHAR2(3), statename VARCHAR2(30), population NUMBER(8), Primary Key (statecode));
prompt --------------------------------------------------------------
prompt Task 1.4 INSERT STATEMENTS TO POPULATE STATE TABLE WITH VALID DATA
--XXXXXXXXXXXXXXXX 
INSERT INTO STATE (statecode, statename, population) VALUES ('ACT', 'Australian Capital Territory', 385000);
INSERT INTO STATE (statecode, statename, population) VALUES ('NSW', 'New South Wales', 7440000);
INSERT INTO STATE (statecode, statename, population) VALUES ('NT', 'Northern Territory', 242000);
INSERT INTO STATE (statecode, statename, population) VALUES ('QLD', 'Queensland', 4680000);
INSERT INTO STATE (statecode, statename, population) VALUES ('SA', 'South Australia', 1670000);
INSERT INTO STATE (statecode, statename, population) VALUES ('TAS', 'Tasmania', 510000);
INSERT INTO STATE (statecode, statename, population) VALUES ('VIC', 'Victoria', 5790000);
INSERT INTO STATE (statecode, statename, population) VALUES ('WA', 'Western Australia', 2500000);
prompt --------------------------------------------------------------
prompt Task 1.5 STATE List Rows
--XXXXXXXXXXXXXXXX
SELECT * FROM STATE ORDER BY population DESC;
prompt --------------------------------------------------------------
prompt Task 1.6 PK Test
--XXXXXXXXXXXXXXXX
INSERT INTO STATE (statecode, statename, population) VALUES ('NT', 'Northern Territory', 190000);
prompt --------------------------------------------------------------
prompt Task 1.7 State Name Size Test
--XXXXXXXXXXXXXXXX
INSERT INTO STATE (statecode, statename, population) VALUES ('SWA', 'South West Region of Western Australia', 418000);
prompt -------------------------------------------------------------- 
prompt Task 1.8 POPULATION Size Test
--XXXXXXXXXXXXXXXX
INSERT INTO STATE (statecode, statename, population) VALUES ('CI', 'Christmas Island', 123000000);
prompt -------------------------------------------------------------- 
prompt Task 1.9 CREATE CITY TABLE
--XXXXXXXXXXXXXXXX
CREATE TABLE CITY (cityid NUMBER(3), cityname VARCHAR2(30), statecode VARCHAR2(3) NOT NULL, Primary Key (cityid), Foreign Key (statecode) REFERENCES STATE);
prompt -------------------------------------------------------------- 
prompt Task 1.10 POPULATE CITY TABLE
--XXXXXXXXXXXXXXXX
INSERT INTO CITY (cityid, cityname, statecode) VALUES (1, 'Longwarry', 'VIC');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (2, 'Port Melbourne', 'VIC');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (3, 'Ashfield', 'NSW');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (4, 'Bayswater', 'WA');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (5, 'Geelong', 'VIC');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (6, 'Beaconsfield', 'VIC');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (7, 'Port Adelaide', 'SA');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (8, 'Beaconsfield', 'TAS');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (9, 'Springfield', 'TAS');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (10, 'Springfield', 'NSW');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (11, 'Springfield', 'QLD');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (12, 'Marmong Point', 'NSW');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (13, 'Beachport', 'SA');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (14, 'Point Grey', 'NT');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (15, 'Blacktown', 'NSW');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (16, 'Fielding', 'QLD');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (17, 'Airlie Beach', 'QLD');
INSERT INTO CITY (cityid, cityname, statecode) VALUES (18, 'Longreach', 'QLD');
prompt --------------------------------------------------------------
prompt Task 1.11 CITY List
--XXXXXXXXXXXXXXXX 
SELECT * FROM CITY ORDER BY cityid ASC;
prompt --------------------------------------------------------------
prompt Task 1.12 CITY and STATE LIST with INNER JOIN
--XXXXXXXXXXXXXXXX
SELECT C.cityid, C.cityname, S.statename, S.population FROM CITY C
INNER JOIN STATE S
ON C.statecode = S.statecode
ORDER BY C.cityid ASC;
prompt --------------------------------------------------------------
prompt Task 1.13 FK Test (Must Fail)
--XXXXXXXXXXXXXXXX
INSERT INTO CITY (cityid, cityname, statecode) VALUES (20, 'Bendigo', 'TED');
prompt --------------------------------------------------------------
prompt Task 1.14 NULL FK Test (Must Fail)
--XXXXXXXXXXXXXXXX
INSERT INTO CITY (cityid, cityname, statecode) VALUES (21, 'Newcastle', NULL);
prompt --------------------------------------------------------------
prompt Task 1.15 CREATE WAREHOUSE TABLE
--XXXXXXXXXXXXXXXX
CREATE TABLE WAREHOUSE (
	whid NUMBER(3),
	security_level NUMBER(1),
	quarantine_facilities VARCHAR2(1),
	max_pallets NUMBER(6),
	freezer_facilities VARCHAR2(1),
	cost_per_pallet NUMBER(4,2),
	manager_name VARCHAR2(30),
	cityid NUMBER(3) NOT NULL,
	Primary Key (whid),
	Foreign Key (cityid) REFERENCES CITY
);
prompt --------------------------------------------------------------
prompt Task 1.16 POPULATE WAREHOUSE TABLE 
--XXXXXXXXXXXXXXXX
INSERT INTO WAREHOUSE (whid, cityid, max_pallets, cost_per_pallet, security_level, freezer_facilities, quarantine_facilities, manager_name) VALUES (50, 1, 4160, 46.30, 1, 'Y', 'Y', 'Vicki');
INSERT INTO WAREHOUSE (whid, cityid, max_pallets, cost_per_pallet, security_level, freezer_facilities, quarantine_facilities, manager_name) VALUES (52, 2, 8260, 12.50, 5, 'N', 'N', 'Frankie');
INSERT INTO WAREHOUSE (whid, cityid, max_pallets, cost_per_pallet, security_level, freezer_facilities, quarantine_facilities, manager_name) VALUES (54, 1, 19430, 26.45, 1, 'Y', 'Y', 'Jeff');
INSERT INTO WAREHOUSE (whid, cityid, max_pallets, cost_per_pallet, security_level, freezer_facilities, quarantine_facilities, manager_name) VALUES (56, 3, 1490, 17.10, 5, 'Y', NULL, 'Abed');
INSERT INTO WAREHOUSE (whid, cityid, max_pallets, cost_per_pallet, security_level, freezer_facilities, quarantine_facilities, manager_name) VALUES (58, 8, 16750, 30.30, 2, 'N', 'Y', 'Craig');
INSERT INTO WAREHOUSE (whid, cityid, max_pallets, cost_per_pallet, security_level, freezer_facilities, quarantine_facilities, manager_name) VALUES (60, 10, 3290, 26.20, 1, 'N', NULL, 'Rachel');
INSERT INTO WAREHOUSE (whid, cityid, max_pallets, cost_per_pallet, security_level, freezer_facilities, quarantine_facilities, manager_name) VALUES (62, 14, 3610, 22.90, 3, 'N', 'N', 'Shirley');
INSERT INTO WAREHOUSE (whid, cityid, max_pallets, cost_per_pallet, security_level, freezer_facilities, quarantine_facilities, manager_name) VALUES (64, 15, 6660, 14.35, 5, 'N', 'Y', 'Leonard');
INSERT INTO WAREHOUSE (whid, cityid, max_pallets, cost_per_pallet, security_level, freezer_facilities, quarantine_facilities, manager_name) VALUES (66, 3, 13160, 16.70, 4, 'Y', 'Y', 'Troy');
INSERT INTO WAREHOUSE (whid, cityid, max_pallets, cost_per_pallet, security_level, freezer_facilities, quarantine_facilities, manager_name) VALUES (68, 16, 2760, 32.90, 2, 'N', 'Y', 'Ian');
INSERT INTO WAREHOUSE (whid, cityid, max_pallets, cost_per_pallet, security_level, freezer_facilities, quarantine_facilities, manager_name) VALUES (70, 3, 4300, 15.00, 3, 'Y', 'N', 'Pavel');
INSERT INTO WAREHOUSE (whid, cityid, max_pallets, cost_per_pallet, security_level, freezer_facilities, quarantine_facilities, manager_name) VALUES (72, 8, 5200, 18.00, 4, 'N', NULL, 'Michelle');
INSERT INTO WAREHOUSE (whid, cityid, max_pallets, cost_per_pallet, security_level, freezer_facilities, quarantine_facilities, manager_name) VALUES (74, 1, 8100, 21.00, 3, 'Y', 'N', 'Alessasndra');
prompt 
prompt Task 2.0 Warehouse List
--XXXXXXXXXXXXXXXX
SELECT * FROM WAREHOUSE ORDER BY whid ASC;
prompt --------------------------------------------------------------
prompt Task 2.1 Query 1
--XXXXXXXXXXXXXXXX
SELECT * FROM CITY
WHERE cityname LIKE 'B%' OR cityname LIKE'P%'
ORDER BY cityname ASC, statecode ASC;
prompt --------------------------------------------------------------
prompt Task 2.2 Query 2
--XXXXXXXXXXXXXXXX
SELECT * FROM CITY
WHERE (cityname LIKE 'B%' OR cityname LIKE'P%')
AND statecode = 'VIC'
ORDER BY cityname ASC;
prompt --------------------------------------------------------------
prompt Task 2.3 Query 3
--XXXXXXXXXXXXXXXX
SELECT whid, max_pallets, security_level FROM WAREHOUSE
WHERE (max_pallets < 3000 OR max_pallets > 10000) 
AND (security_level = 1 OR security_level = 5);
prompt --------------------------------------------------------------
prompt Task 2.4 Query 4
--XXXXXXXXXXXXXXXX
SELECT  whid, cost_per_pallet, security_level, freezer_facilities FROM WAREHOUSE
ORDER BY whid ASC;
prompt --------------------------------------------------------------
prompt Task 2.5 Query 5
--XXXXXXXXXXXXXXXX
SELECT * FROM WAREHOUSE
WHERE freezer_facilities = 'Y'
AND ((security_level = 3 AND quarantine_facilities = 'N') OR (security_level = 5 AND quarantine_facilities = 'Y'));
prompt --------------------------------------------------------------
prompt Task 2.6 Query 6
--XXXXXXXXXXXXXXXX
SELECT * FROM WAREHOUSE
WHERE quarantine_facilities IS NULL
ORDER BY whid ASC;
prompt --------------------------------------------------------------
prompt Task 2.7 Query 7
--XXXXXXXXXXXXXXXX
SELECT * FROM CITY 
WHERE UPPER(cityname) LIKE '%BEACH%'
OR UPPER(cityname) LIKE '%FIELD%'
OR UPPER(cityname) LIKE '%LONG%'
OR UPPER(cityname) LIKE '%POINT%'
OR UPPER(cityname) LIKE 'BEACH%'
OR UPPER(cityname) LIKE 'FIELD%'
OR UPPER(cityname) LIKE 'LONG%'
OR UPPER(cityname) LIKE 'POINT%'
OR UPPER(cityname) LIKE '%BEACH'
OR UPPER(cityname) LIKE '%FIELD'
OR UPPER(cityname) LIKE '%LONG'
OR UPPER(cityname) LIKE '%POINT'
ORDER BY cityname ASC;
prompt --------------------------------------------------------------
prompt Task 2.8 Query 8
--XXXXXXXXXXXXXXXX
SELECT whid, max_pallets, cost_per_pallet, max_pallets*cost_per_pallet AS "maximum cost"
FROM WAREHOUSE
ORDER BY 4 DESC;
prompt --------------------------------------------------------------
prompt Task 2.9 Query 9
--XXXXXXXXXXXXXXXX
SELECT W.whid, W.max_pallets, W.max_pallets*W.cost_per_pallet AS "maximum cost", S.population, S.statename
FROM WAREHOUSE W
INNER JOIN CITY C
ON W.cityid = C.cityid
INNER JOIN STATE S
ON C.statecode = S.statecode
WHERE (S.population > 3000000)
AND (W.max_pallets >= 2000)
AND ((W.max_pallets * W.cost_per_pallet) < 150000)
ORDER BY W.whid ASC;
prompt --------------------------------------------------------------
prompt Task 2.10 Query 10
--XXXXXXXXXXXXXXXX
SELECT DISTINCT cityname FROM CITY
ORDER BY cityname ASC;
prompt --------------------------------------------------------------
prompt Task 3.1 Update 1
--XXXXXXXXXXXXXXXX
UPDATE WAREHOUSE 
SET max_pallets = 20000
WHERE whid = 54; 
prompt --------------------------------------------------------------
prompt Task 3.2 Update 2
--XXXXXXXXXXXXXXXX
UPDATE WAREHOUSE
SET cost_per_pallet = cost_per_pallet + 1.99
WHERE security_level = 3;
prompt --------------------------------------------------------------
prompt Task 3.3 Delete 1
--XXXXXXXXXXXXXXXX
DELETE FROM CITY
WHERE cityid = 13;
prompt --------------------------------------------------------------
prompt Task 3.4 Delete 2 (Must Fail)
--XXXXXXXXXXXXXXXX
--Fails due to child record found
DELETE FROM CITY
WHERE cityid = 3;
prompt --------------------------------------------------------------
prompt Task 3.5 Warehouse Query 
--XXXXXXXXXXXXXXXX
SELECT * FROM WAREHOUSE
ORDER BY whid ASC;
prompt --------------------------------------------------------------
prompt Task 4.1 ENGLISH SENTENCES DESCRIBING THE ERD
--XXXXXXXXXXXXXXXX (Replace this line with your English statements)
--ONE STATE MAY have MANY CITY.
--ONE CITY MUST have ONE STATE.
--ONE CITY MAY contain MANY WAREHOUSE.
--ONE WAREHOUSE MUST belong to ONE CITY.
--ONE CITY MAY have within it MANY MANUFACTURER.
--ONE MANUFACTURER MUST be located in ONE CITY.
--ONE WAREHOUSE MAY STORE MANY STOCKITEM.
--ONE MANUFACTURER MAY manufacture MANY STOCKITEM.
--ONE STOCKITEM MUST be manufactured by ONE MANUFACTURER.
--ONE STOCKITEM MUST be stored in ONE WAREHOUSE.
prompt --------------------------------------------------------------
prompt Task 4.2 DROP ALL TABLES
--DO NOT ADD DROP STATEMENTS HERE. PUT THEM IN SECTION 1.2 ABOVE
--DO NOT ADD DROP STATEMENTS HERE. PUT THEM IN SECTION 1.2 ABOVE
prompt --------------------------------------------------------------
prompt Task 4.3 CREATE MANUFACTURER and STOCKITEM TABLES
--XXXXXXXXXXXXXXXX
CREATE TABLE MANUFACTURER (
	manid NUMBER(2),
	man_title VARCHAR2(30),
	owner_name VARCHAR2(30),
	cityid	NUMBER(3),
	Primary Key (manid),
	Foreign Key (cityid) REFERENCES CITY
);
CREATE TABLE STOCKITEM (
	stkid NUMBER(2),
	stkname VARCHAR2(30),
	selling_price  NUMBER(6,2),
	purchase_price NUMBER(6,2),
	manid NUMBER(2) NOT NULL,
	whid NUMBER(3) NOT NULL,
 	Primary Key (stkid),
	Foreign Key (manid) REFERENCES MANUFACTURER,
	Foreign Key (whid) REFERENCES WAREHOUSE
);
prompt --------------------------------------------------------------
prompt Task 4.4 POPULATE MANUFACTURER TABLE
--XXXXXXXXXXXXXXXX 
INSERT INTO MANUFACTURER (manid, man_title, owner_name, cityid) VALUES (41, 'SJ Smith Goods', 'Jeff', 2);
INSERT INTO MANUFACTURER (manid, man_title, owner_name, cityid) VALUES (42, 'Rose Tyler Electrics', 'Britta', 3);
INSERT INTO MANUFACTURER (manid, man_title, owner_name, cityid) VALUES (43, 'Noble House', 'Troy', 7);
INSERT INTO MANUFACTURER (manid, man_title, owner_name, cityid) VALUES (44, 'The Pond', 'Annie', 16);
INSERT INTO MANUFACTURER (manid, man_title, owner_name, cityid) VALUES (45, 'Martha Jones Manufacturing', 'Shirley', 2);
INSERT INTO MANUFACTURER (manid, man_title, owner_name, cityid) VALUES (46, 'Rory Williams Development', 'Abed', 3);
prompt --------------------------------------------------------------
prompt Task 4.5 POPULATE STOCKITEM TABLE 
--XXXXXXXXXXXXXXXX 
INSERT INTO STOCKITEM (stkid, stkname, selling_price, purchase_price, manid, whid) VALUES (71, 'Electric Fan', 15.50, 6.20, 42, 50);
INSERT INTO STOCKITEM (stkid, stkname, selling_price, purchase_price, manid, whid) VALUES (74, 'Drill Set', 26.0, 9.10, 45, 52);
INSERT INTO STOCKITEM (stkid, stkname, selling_price, purchase_price, manid, whid) VALUES (77, 'Sun Lounge', 38.00, 19.00, 43, 56);
INSERT INTO STOCKITEM (stkid, stkname, selling_price, purchase_price, manid, whid) VALUES (78, 'Whisk Combo', 11.00, 2.75, 41, 56);
INSERT INTO STOCKITEM (stkid, stkname, selling_price, purchase_price, manid, whid) VALUES (82, 'Solar Pump', 5.60, 1.68, 44, 58);
INSERT INTO STOCKITEM (stkid, stkname, selling_price, purchase_price, manid, whid) VALUES (84, 'Storage Box', 27.75, 9.72, 46, 56);
INSERT INTO STOCKITEM (stkid, stkname, selling_price, purchase_price, manid, whid) VALUES (85, 'Refrigerator', 40.00, 22.00, 42, 50);
INSERT INTO STOCKITEM (stkid, stkname, selling_price, purchase_price, manid, whid) VALUES (86, 'Magnetic Desk Toy', 29.99, 14.20, 43, 68);
INSERT INTO STOCKITEM (stkid, stkname, selling_price, purchase_price, manid, whid) VALUES (87, 'Sports Umbrella', 35.00, 7.25, 45, 62);
INSERT INTO STOCKITEM (stkid, stkname, selling_price, purchase_price, manid, whid) VALUES (88, 'DVD player', 32.50, 18.50, 41, 58);
INSERT INTO STOCKITEM (stkid, stkname, selling_price, purchase_price, manid, whid) VALUES (89, 'Garden Tools', 18.00, 5.90, 46, 50);
prompt --------------------------------------------------------------
prompt Task 4.6 FK Test 1 (Must Fail)
--XXXXXXXXXXXXXXXX
INSERT INTO MANUFACTURER (manid, man_title, owner_name, cityid) VALUES (58, 'River Electrics', 'Pierce', 99);
prompt --------------------------------------------------------------
prompt Task 4.7 FK Test 2 (Must Fail)
--XXXXXXXXXXXXXXXX
INSERT INTO STOCKITEM (stkid, stkname, selling_price, purchase_price, manid, whid) VALUES (91, 'Electric Fan', 15.5, 6.2, 99, 60);
prompt --------------------------------------------------------------
prompt Task 4.8 FK Test 3 (Must Fail)
--XXXXXXXXXXXXXXXX
INSERT INTO STOCKITEM (stkid, stkname, selling_price, purchase_price, manid, whid) VALUES (92, 'Coffee Maker', 78, 22, 43, 99);
prompt --------------------------------------------------------------
prompt Task 5.1.1 Query 1
--XXXXXXXXXXXXXXXX
SELECT * FROM STOCKITEM
WHERE (selling_price > (purchase_price * 3))
OR (selling_price < (purchase_price * 2))
ORDER BY stkid ASC;
prompt --------------------------------------------------------------
prompt Task 5.1.2 Query 2
--XXXXXXXXXXXXXXXX
SELECT * FROM STOCKITEM
WHERE NOT selling_price IN (11, 18, 27.75, 38)
ORDER BY stkid ASC;
prompt --------------------------------------------------------------
prompt Task 5.1.3 Query 3
--XXXXXXXXXXXXXXXX
SELECT S.stkid AS "STOCK ID", S.stkname AS "STOCK NAME", C.cityname AS "MANUFACTURER CITY"
FROM STOCKITEM S
INNER JOIN MANUFACTURER M
ON S.manid = M.manid
INNER JOIN CITY C
ON M.cityid = C.cityid
ORDER BY stkid ASC;
prompt --------------------------------------------------------------
prompt Task 5.1.4 Query 4
--XXXXXXXXXXXXXXXX
SELECT S.stkid AS "STOCK ID", S.stkname AS "STOCK NAME", W.whid AS "WAREHOUSE ID", ST.statename AS "STATE NAME", ST.population AS "POPULATION"
FROM STOCKITEM S
INNER JOIN WAREHOUSE W
ON S.whid = W.whid
INNER JOIN CITY C
ON W.cityid = C.cityid
INNER JOIN STATE ST
ON C.statecode = ST.statecode
ORDER BY S.stkid ASC;
prompt --------------------------------------------------------------
prompt Task 5.2 Delete 1 (Must Fail)
--XXXXXXXXXXXXXXXX
DELETE FROM CITY
WHERE cityname = 'Ashfield';
prompt --------------------------------------------------------------
prompt Task 5.3 Delete 2 (Must Fail)
--XXXXXXXXXXXXXXXX
DELETE FROM MANUFACTURER
WHERE manid = 42;
prompt --------------------------------------------------------------
prompt Task 5.4 List City Table
--XXXXXXXXXXXXXXXX
SELECT * FROM CITY
ORDER BY cityid ASC;
prompt --------------------------------------------------------------
prompt Task 5.5 List Manufacturer Table
--XXXXXXXXXXXXXXXX
SELECT * FROM MANUFACTURER
ORDER BY manid ASC;
prompt --------------------------------------------------------------
prompt Task 6.1 Query 1 
--XXXXXXXXXXXXXXXX
SELECT S.stkid, S.stkname, W.whid, C.cityname, W.manager_name, M.man_title, M.owner_name
FROM STOCKITEM S
INNER JOIN WAREHOUSE W
ON S.whid = W.whid
INNER JOIN MANUFACTURER M
ON S.manid = M.manid
INNER JOIN CITY C
ON W.cityid = C.cityid
WHERE W.manager_name = M.owner_name
ORDER BY S.stkid ASC;
prompt --------------------------------------------------------------
prompt Task 6.2.0 DROP TABLE STATEMENT
--DO NOT ADD DROP STATEMENT HERE. PUT IT IN SECTION 1.2 ABOVE
prompt --------------------------------------------------------------
prompt Task 6.2.1 Create NEW Table statement  
--XXXXXXXXXXXXXXXX
CREATE TABLE SHOP (
	abn NUMBER(5),
	shop_name VARCHAR2(30),
	owner_name VARCHAR2(30),
	shop_type VARCHAR2(10),
	cityid NUMBER(3) NOT NULL,
	Primary Key (abn),
	Foreign Key (cityid) REFERENCES CITY
);
prompt --------------------------------------------------------------
prompt Task 6.2.3 Insert Data statements
--XXXXXXXXXXXXXXXX
INSERT INTO SHOP (abn, shop_name, owner_name, shop_type, cityid) VALUES (123, 'Toys R Us', 'John Smith', 'Toys', 2);
INSERT INTO SHOP (abn, shop_name, owner_name, shop_type, cityid) VALUES (456, 'Howards Storage World', 'Regina Felangi', 'Homewares', 6);
INSERT INTO SHOP (abn, shop_name, owner_name, shop_type, cityid) VALUES (789, 'Apple', 'Miles Donbury', 'Computers', 17);
INSERT INTO SHOP (abn, shop_name, owner_name, shop_type, cityid) VALUES (987, 'Popcorn Gallery', 'Felicia Wagglemuffin', 'Food', 3);
INSERT INTO SHOP (abn, shop_name, owner_name, shop_type, cityid) VALUES (654, 'Rubens', 'Ruben Gina', 'Food', 4);
prompt --------------------------------------------------------------
prompt Task 6.2.4 Query 2  
--XXXXXXXXXXXXXXXX
--Select all the SHOPS that are located in the state of Victoria.
SELECT SH.abn AS "ABN", SH.shop_name AS "Shop Name", SH.owner_name AS "Owners Name", SH.shop_type AS "Shop Type", SH.cityid AS "City ID", C.cityname AS "City Name", S.statename AS "State"
FROM SHOP SH
INNER JOIN CITY C
ON SH.cityid = C.cityid
INNER JOIN STATE S
ON C.statecode = S.statecode
WHERE S.statename = 'Victoria'
ORDER BY SH.abn ASC;
prompt --------------------------------------------------------------
prompt END OF ASSIGNMENT  

